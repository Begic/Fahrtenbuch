// <auto-generated />
using System;
using Fahrtenbuch.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fahrtenbuch.Data.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20240122090115_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fahrtenbuch.Data.Entities.CompanyCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CompanyCarId")
                        .HasColumnType("int");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCarId");

                    b.ToTable("CompanyCars");
                });

            modelBuilder.Entity("Fahrtenbuch.Data.Entities.Drive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArrivalMileage")
                        .HasColumnType("int");

                    b.Property<int>("CompanyCarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartureMileage")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurposeOfTrip")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("StartTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TravelRoute")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCarId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Drives");
                });

            modelBuilder.Entity("Fahrtenbuch.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("Passwort")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Fahrtenbuch.Data.Entities.CompanyCar", b =>
                {
                    b.HasOne("Fahrtenbuch.Data.Entities.CompanyCar", null)
                        .WithMany("CompanyCars")
                        .HasForeignKey("CompanyCarId");
                });

            modelBuilder.Entity("Fahrtenbuch.Data.Entities.Drive", b =>
                {
                    b.HasOne("Fahrtenbuch.Data.Entities.CompanyCar", "CompanyCar")
                        .WithMany()
                        .HasForeignKey("CompanyCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fahrtenbuch.Data.Entities.Employee", "Employee")
                        .WithMany("Drives")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyCar");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fahrtenbuch.Data.Entities.CompanyCar", b =>
                {
                    b.Navigation("CompanyCars");
                });

            modelBuilder.Entity("Fahrtenbuch.Data.Entities.Employee", b =>
                {
                    b.Navigation("Drives");
                });
#pragma warning restore 612, 618
        }
    }
}
